SET PC, start
; Memory
; ==============================
:major_version
DAT 0x0001
:minor_version
DAT 0x0008
:cursor
DAT 0x0000
:keyboard_hwid
DAT 0x0000
:keyboard_msg
DAT 0x0001
:screen_hwid
DAT 0x0000
:sensor_hwid
DAT 0x0000
:throttle
DAT 0x00FF
:video_ram
DAT 0x8000

:keys_changed
DAT 0x0000
:keys_down
:key_w_down
DAT 0x0000
:key_a_down
DAT 0x0000
:key_s_down
DAT 0x0000
:key_d_down
DAT 0x0000
:key_q_down
DAT 0x0000
:key_e_down
DAT 0x0000
:key_f_down
DAT 0x0000
:key_r_down
DAT 0x0000

; Program Code
; =============================
:start
SET [keyboard_hwid], 0xffff
SET [screen_hwid], 0xffff
SET [sensor_hwid], 0xffff
SET [cursor], 0x0000
JSR clear_screen


; Check and setup monitor/keyboard
; ==============================
HWN J
SET I, 0
:iterate_hw
HWQ I
IFE B, 0x30cf
IFE A, 0x7406
	SET [keyboard_hwid], I
IFE B, 0x7349
IFE A, 0xf615
	SET [screen_hwid], I
IFE B, 0x1F12
IFE A, 0xE306
	SET [sensor_hwid], I
ADD I, 1
IFL I, J
	SET PC, iterate_hw

:check_hw
IFE [screen_hwid], 0xffff
	SET PC, catch_fire
IFN [keyboard_hwid], 0xffff
	SET PC, setup_hw
SET Z, 0xF000
SET A, str_no_keyboard_message
JSR write_string
SET PC, catch_fire

:setup_hw
SET A, 0
SET B, [video_ram]
HWI [screen_hwid]
SET A, 3
SET B, 0
HWI [screen_hwid]

SET A, 1
SET B, font
HWI [screen_hwid]

SET A, 3
SET B, [keyboard_msg]
HWI [keyboard_hwid]
SET A, 0
HWI [keyboard_hwid]

; Check thrusters
; ==============================
HWN J
IFL J, 8
	SET PC, no_thrusters
	
SET I, 0
:iterate_thruster_hw_loop
IFE I, 8
	SET PC, take_off
HWQ I
ADD I, 1
IFE B, 0xa474
IFE A, 0x8683
	SET PC, iterate_thruster_hw_loop
	
:no_thrusters
SET A, str_no_thruster_message
SET Z, 0xF000
JSR write_string
SET PC, catch_fire
 



; Ready to go
; ==============================
:take_off
IAS irq_handler
JSR clear_screen
SET Z, 0x7000
SET A, str_title
JSR write_string
SET [cursor], 64
SET A, str_sensor_message
JSR write_string
JSR newline
SET A, str_heading
JSR write_string



; Main loop
; ==============================
SET [keys_changed], 1
:wait_for_key_loop

SET [cursor], 28
JSR write_throttle
SET [cursor], 0x0080
IFN [sensor_hwid], 0xffff
	JSR display_sensors
IFE [keys_changed], 0
	SET PC, wait_for_key_loop

SET [keys_changed], 0
SET I, 0
SET A, 2
:key_update_loop
SET B, [I + keys]
HWI [keyboard_hwid]
SET [I + keys_down], C
ADD I, 1
IFL I, 8
	SET PC, key_update_loop

; 0: W
; 1: W
; 2: S
; 3: S
; 4: D | E
; 5: D | Q
; 6: A | Q
; 7: A | E

SET A, 0
; 0
; 1
SET B, 0
IFE [key_w_down], 1
SET B, [throttle]
HWI 0
HWI 1
; 2
; 3
SET B, 0
IFE [key_s_down], 1
SET B, [throttle]
HWI 2
HWI 3
; 4
SET B, 0
IFE [key_d_down], 1
SET B, [throttle]
IFE [key_e_down], 1
SET B, [throttle]
HWI 4
; 5
SET B, 0
IFE [key_d_down], 1
SET B, [throttle]
IFE [key_q_down], 1
SET B, [throttle]
HWI 5
; 6
SET B, 0
IFE [key_a_down], 1
SET B, [throttle]
IFE [key_q_down], 1
SET B, [throttle]
HWI 6
; 7
SET B, 0
IFE [key_a_down], 1
SET B, [throttle]
IFE [key_e_down], 1
SET B, [throttle]
HWI 7

IFE [key_r_down], 1
	JSR throttle_up
IFE [key_f_down], 1
	JSR throttle_down

SET PC, wait_for_key_loop

; Interrupt handler
; ==============================
:irq_handler
IFE A, [keyboard_msg] 
	JSR keyboard_irq_handler
RFI 0

:keyboard_irq_handler
SET [keys_changed], 1
SET PC, POP


; Support routines
; ==============================
:clear_screen
SET [cursor], 0x0000
SET PUSH, I
SET PUSH, J
SET I, [video_ram]
SET J, 0x180
ADD J, I
:clear_screen_loop
SET [I], 0x20
ADD I, 1
IFN I, J
	SET PC, clear_screen_loop
SET J, POP
SET I, POP
SET PC, POP

:display_sensors
SET PUSH, A
SET PUSH, I
SET [cursor], 0x0080
SET I, 0
SET A, 1
HWI [sensor_hwid]
:display_sensors_loop
SET A, 0
HWI [sensor_hwid]
JSR display_contact
ADD I, 1
IFN I, 7
	SET PC, display_sensors_loop
SET I, POP
SET A, POP
SET PC, POP

:display_contact
IFE B, 0x0000
	SET PC, write_blank_line
SET PUSH, A
JSR write_type
SUB [cursor], 16
SET A, Z
JSR write_range
ADD [cursor], 7
SET A, Y
DIV A, 0x0021
JSR write_range
ADD [cursor], 4
SET A, X
JSR write_angle

JSR newline
SET A, POP
SET PC, POP

:throttle_up

IFN [throttle], 255
	ADD [throttle], 25
IFE [throttle], 250
	SET [throttle], 255

SET PC, POP

:throttle_down

IFN [throttle], 0
	SUB [throttle], 25
IFE [throttle], 230
	SET [throttle], 225
SET PC, POP

:write_throttle
IFE [throttle], 0
	SET A, str_0
IFE [throttle], 25
	SET A, str_10
IFE [throttle], 50
	SET A, str_20
IFE [throttle], 75
	SET A, str_30
IFE [throttle], 100
	SET A, str_40
IFE [throttle], 125
	SET A, str_50
IFE [throttle], 150
	SET A, str_60
IFE [throttle], 175
	SET A, str_70
IFE [throttle], 200
	SET A, str_80
IFE [throttle], 225
	SET A, str_90
IFG [throttle], 225
	SET A, str_100
SET Z, 0xA000
JSR write_string
SET PC, POP

:write_type
SET PUSH, Z
SET A, 0xffff
IFE B, 0x0003
	SET A, str_manmade
IFE B, 0x0003
	IFE Z, 0x00CA
		SET A, str_station
IFE B, 0x0003
	IFE Z, 0x000C
		SET A, str_ship
IFE B, 0x0003
	IFE Z, 0x0015
		SET A, str_mystery
IFE B, 0x0001
	SET A, str_astblue
IFE B, 0x0101
	SET A, str_astred
IFE B, 0x0201
	SET A, str_astgold
IFE B, 0x0301
	SET A, str_astblack
IFE B, 0x0401
	SET A, str_astgreen
IFE B, 0x0501
	SET A, str_astrock
IFE B, 0x0601
	SET A, str_astrock
IFE B, 0x0701
	SET A, str_astrock
IFE B, 0x0801
	SET A, str_astrock
IFE B, 0x0901
	SET A, str_astrock
SET Z, 0xA000
JSR write_string
SET Z, POP
SET PC, POP

:write_range
SET PUSH, X
SET X, [cursor]
ADD X, [video_ram]
SET [X], 0xA06D
SUB [cursor], 1
JSR write_decimal
ADD [cursor], 1
SET X, POP
SET PC, POP

:write_decimal
SET PUSH, B
SET PUSH, C
SET PUSH, I
SET I, 0
SET C, A
:decimalloop
SET B, C
MOD B, 10
SET A, B
JSR to_string
SUB [cursor], 2
DIV C, 10
ADD I, 1
IFN C, 0
	SET PC, decimalloop
ADD [cursor], I
SET I, POP
SET C, POP
SET B, POP
SET PC, POP

:write_angle
SET PUSH, X
SET PUSH, Z
SET PUSH, B
SET X, [cursor]
ADD X, [video_ram]
SET B, A
AND B, 0x8000
IFE B, 0x8000
	SET PC, angle_negative
IFE B, 0x0000
	SET PC, angle_positive


:angle_negative
SET [X], 0xB02D
SET B, A
XOR B, 0xFFFF
ADD B, 1
SET PC, exit_angle

:angle_positive
SET [X], 0xB020
SET B, A
:exit_angle
DIV B, 0x0222
ADD [cursor], 4
SET A, B
JSR write_decimal

	
SET B, POP
SET Z, POP
SET X, POP
SET PC, POP



:write_hex
SET PUSH, B
SET B, A
SHR A, 0x0C
JSR to_string
SET A, B
SHL A, 0x04
SHR A, 0x0C
JSR to_string
SET A, B
SHL A, 0x08
SHR A, 0x0C
JSR to_string
SET A, B
SHL A, 0x0C
SHR A, 0x0C
JSR to_string
SET B, POP
SET PC, POP

:to_string
SET PUSH, X
SET X, [cursor]
ADD X, [video_ram]
IFE A, 0x0000
	SET [X], 0xA030
IFE A, 0x0001
	SET [X], 0xA031
IFE A, 0x0002
	SET [X], 0xA032
IFE A, 0x0003
	SET [X], 0xA033
IFE A, 0x0004
	SET [X], 0xA034
IFE A, 0x0005
	SET [X], 0xA035
IFE A, 0x0006
	SET [X], 0xA036
IFE A, 0x0007
	SET [X], 0xA037
IFE A, 0x0008
	SET [X], 0xA038
IFE A, 0x0009
	SET [X], 0xA039
IFE A, 0x000A
	SET [X], 0xA041
IFE A, 0x000B
	SET [X], 0xA042
IFE A, 0x000C
	SET [X], 0xA043
IFE A, 0x000D
	SET [X], 0xA044
IFE A, 0x000E
	SET [X], 0xA045
IFE A, 0x000F
	SET [X], 0xA046

ADD [cursor], 0x0001

SET X, POP
SET PC, POP

:write_string
SET PUSH, I
SET PUSH, J
SET PUSH, B
SET PUSH, X
SET X, [cursor]
ADD X, [video_ram]
SET I, X
SET J, A
:write_string_loop
SET B, [J]
BOR B, Z
SET [I], B
ADD I, 1
ADD J, 1
ADD [cursor], 0x0001
IFN [J], 0
	SET PC, write_string_loop
SET X, POP
SET B, POP
SET J, POP
SET I, POP
SET PC, POP

:write_blank_line
SET A, str_blank_line
JSR write_string
SET PC, POP


:newline
SET PUSH, B
SET PUSH, C
SET C, [cursor]
MOD C, 32
SET B, 32
SUB B, C
ADD [cursor], B
IFG [cursor], 0x0179
	SET [cursor], 0x0000
SET C, POP
SET B, POP
SET PC, POP

:intro

SET PC, POP




:catch_fire
DAT 0x0000

; Strings AND Constants
; =======================
:str_blank_line
DAT "                                ", 0
:str_no_thruster_message
DAT "Hardware 0-7 expected to be     thrusters. Halting.", 0
:str_no_keyboard_message
DAT "No keyboard found. Halting.", 0
:str_sensor_message
DAT "       Sensor Contacts ", 0
:str_heading
DAT "  Type:      Size:  Range: Angle", 0
:str_title
DAT "MG Helm 1.8        Throttle    %", 0
:str_station
DAT "The Station                     ", 0
:str_ship
DAT "Player Ship                     ", 0
:str_mystery
DAT "Mystery!!!                      ", 0
:str_manmade
DAT "Manmade Obj                     ", 0
:str_astgreen
DAT "Ast (Green)                     ", 0
:str_astred
DAT "Ast (Red)                       ", 0
:str_astblack
DAT "Ast (Black)                     ", 0
:str_astblue
DAT "Ast (Blue)                      ", 0
:str_astgold
DAT "Ast (Gold)                      ", 0
:str_astrock
DAT "Ast (Rock)                      ", 0
:str_100
DAT "100", 0
:str_90
DAT " 90", 0
:str_80
DAT " 80", 0
:str_70
DAT " 70", 0
:str_60
DAT " 60", 0
:str_50
DAT " 50", 0
:str_40
DAT " 40", 0
:str_30
DAT " 30", 0
:str_20
DAT " 20", 0
:str_10
DAT " 10", 0
:str_0
DAT "  0", 0



:keys
DAT 'w'
DAT 'a'
DAT 's'
DAT 'd'
DAT 'q'
DAT 'e'
DAT 'f'
DAT 'r'

; FONT
; ========================================

:font
dat 0x000f,0x0808, 0x080f,0x0808, 0x08f8,0x0808, 0x00ff,0x0808, 0x0808,0x0808, 0x08ff,0x0808, 0x00ff,0x1414, 0xff00,0xff08
dat 0x1f10,0x1714, 0xfc04,0xf414, 0x1710,0x1714, 0xf404,0xf414, 0xff00,0xf714, 0x1414,0x1414, 0xf700,0xf714, 0x1417,0x1414
dat 0x0f08,0x0f08, 0x14f4,0x1414, 0xf808,0xf808, 0x0f08,0x0f08, 0x001f,0x1414, 0x00fc,0x1414, 0xf808,0xf808, 0xff08,0xff08
dat 0x14ff,0x1414, 0x080f,0x0000, 0x00f8,0x0808, 0xffff,0xffff, 0xf0f0,0xf0f0, 0xffff,0x0000, 0x0000,0xffff, 0x0f0f,0x0f0f
dat 0x0000,0x0000, 0x005f,0x0000, 0x0300,0x0300, 0x3e14,0x3e00, 0x266b,0x3200, 0x611c,0x4300, 0x3629,0x7650, 0x0002,0x0100
dat 0x1c22,0x4100, 0x4122,0x1c00, 0x2a1c,0x2a00, 0x083e,0x0800, 0x4020,0x0000, 0x0808,0x0800, 0x0040,0x0000, 0x601c,0x0300
dat 0x3e41,0x3e00, 0x427f,0x4000, 0x6259,0x4600, 0x2249,0x3600, 0x0f08,0x7f00, 0x2745,0x3900, 0x3e49,0x3200, 0x6119,0x0700
dat 0x3649,0x3600, 0x2649,0x3e00, 0x0024,0x0000, 0x4024,0x0000, 0x0814,0x2241, 0x1414,0x1400, 0x4122,0x1408, 0x0259,0x0600
dat 0x3e59,0x5e00, 0x7e09,0x7e00, 0x7f49,0x3600, 0x3e41,0x2200, 0x7f41,0x3e00, 0x7f49,0x4100, 0x7f09,0x0100, 0x3e49,0x3a00
dat 0x7f08,0x7f00, 0x417f,0x4100, 0x2040,0x3f00, 0x7f0c,0x7300, 0x7f40,0x4000, 0x7f06,0x7f00, 0x7f01,0x7e00, 0x3e41,0x3e00
dat 0x7f09,0x0600, 0x3e41,0x3e00, 0x7f09,0x7600, 0x2649,0x3200, 0x017f,0x0100, 0x7f40,0x7f00, 0x1f60,0x1f00, 0x7f30,0x7f00
dat 0x7708,0x7700, 0x0778,0x0700, 0x7149,0x4700, 0x007f,0x4100, 0x031c,0x6000, 0x0041,0x7f00, 0x0201,0x0200, 0x8080,0x8080
dat 0x0001,0x0200, 0x2454,0x7800, 0x7f44,0x3800, 0x3844,0x2800, 0x3844,0x7f00, 0x3854,0x5800, 0x087e,0x0900, 0x4854,0x3c00
dat 0x7f04,0x7800, 0x447d,0x4000, 0x2040,0x3d00, 0x7f10,0x6c00, 0x417f,0x4000, 0x7c18,0x7c00, 0x7c04,0x7800, 0x3844,0x3800
dat 0x7c14,0x0800, 0x0814,0x7c00, 0x7c04,0x0800, 0x4854,0x2400, 0x043e,0x4400, 0x3c40,0x7c00, 0x1c60,0x1c00, 0x7c30,0x7c00
dat 0x6c10,0x6c00, 0x4c50,0x3c00, 0x6454,0x4c00, 0x0836,0x4100, 0x0077,0x0000, 0x4136,0x0800, 0x0201,0x0201, 0x040a,0x0a04

