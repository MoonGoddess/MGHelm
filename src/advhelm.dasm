SET PC, start
; Includes and setup variables
:major_version
DAT 0x0000
:minor_version
DAT 0x000d



:mode                           ; which tab is active, 0 scanner, 1 helm, 2 ops, 3 radio 1, 4 radio 2, 5 radio 3
DAT 0x0001
:hcursor                             ;  which line of helm mode is active, currently unused
DAT 0x0000
:rcursor1                            ; which line of radio1 is active, currently unused
DAT 0x0000
:rcursor2                            ; which line of radio2 is active, currently unused
DAT 0x0000
:rcursor3                            ; which line of transmit mode is active.
DAT 0x0000



; Initilize Hardware

:start
JSR detect_hw   
JSR init_screen   ; Assumes LEM1802
JSR init_keyboard ; Assumes generic keyboard
JSR init_clock		; Assumes generic clock
JSR intro_screen
; Assumes 2 standard sensors 2000m range 120 arc,  Sensors currently hardcoded as there's no way to tell facing.
JSR init_radio1
JSR init_radio2
; Assumes 2 harpoons and 4 doors
JSR init_harpoon
; Assumes 8 thrusters 2 per side
JSR init_thrusters

; Ready to go
; ==============================
:take_off
SET [keys_changed], 0
IAS irq_handler
; Set up radios, sets up Radio 1 to listen to station freqency, sets up Radio 2 for broadcast on 0000,0000
SET A, 1
SET B, [type_3_contacts]
SET C, [type_3_contacts+1]
HWI [radio1_hwid]
SET A, 1
SET B, 0x0000
SET C, 0x0000
HWI [radio2_hwid]
SET X, str_sending_message
SET Y, [sending_message]
SET Z, 14
JSR mem_copy
;Shade Radar Background    ; radar currently disabled 
;SET X, [bg_color]
;SET Y, 0x8400
;SET Z, 0x0200
;JSR mem_fill
:wait_for_key_loop1
IFE [keys_changed], 0    ;  Waits for key to be pressed,  to clear Intro Screen 
	SET PC, wait_for_key_loop1

SET [keys_changed], 1
JSR helm_mode_func       ; Sets up  program to start in helm mode, mode 0

; Main loop
; ==============================



:wait_for_key_loop
SET [screen_cursor], 27
SET J, 3
IFE [mode], 1                     ; If in helm mode, write current throttle in upper corner
	JSR write_throttle
SET [screen_cursor], 0x0060
IFE [mode], 1                     ; if in helm mode, update the current sensor contacts in human readable format
	IFN [fsensor_hwid], 0xffff
		JSR display_sensors
;IFE [mode], 0                   
	;JSR scanner_draw
	


IFE [mode], 2					; if in Ops mode, display ops settings. up do date.
	JSR display_ops
IFE [mode], 3					; If in radio1 display data for radio 1.
	JSR display_radio1
IFE [mode], 4					; If in radio2 display data for radio 2
	JSR display_radio2
IFE [mode], 5					; if in radio 3 displays 
	JSR display_radio3
IFE [mode], 0					; displays sensor contacts in hex for testing
	JSR display_dev
IFE [radio_repeating1], 1
	JSR radio1_repeat 
IFE [radio_repeating2], 1
	JSR radio2_repeat 


;IFE [keys_changed], 0
SET PC, wait_for_key_loop



;SET [keys_changed], 0
;SET I, 0
;SET A, 2
;:key_update_loop
;SET B, [I + keys]
;HWI [keyboard_hwid]
;SET [I + keys_down], C
;ADD I, 1
;IFL I, [num_keys]
;	SET PC, key_update_loop

; 0: W
; 1: W
; 2: S
; 3: S
; 4: D | E
; 5: D | Q
; 6: A | Q
; 7: A | E

;SET A, 0
; 0
; 1
;SET B, 0
;IFE [key_w_down], 1
;SET B, [throttle]
;SET I, 0
;HWI [thrusters_hwid]
;SET I, 1
;HWI [thrusters_hwid]
; 2
; 3
;SET B, 0
;IFE [key_s_down], 1
;SET B, [throttle]
;SET I, 2
;HWI [thrusters_hwid]
;SET I, 3
;HWI [thrusters_hwid]
; 4
;SET B, 0
;IFE [key_d_down], 1
;SET B, [throttle]
;IFE [key_e_down], 1
;SET B, [throttle]
;SET I, 4
;HWI [thrusters_hwid]
; 5
;SET B, 0
;IFE [key_d_down], 1
;SET B, [throttle]
;IFE [key_q_down], 1
;SET B, [throttle]
;SET I, 5
;HWI [thrusters_hwid]
; 6
;SET B, 0
;IFE [key_a_down], 1
;SET B, [throttle]
;IFE [key_q_down], 1
;SET B, [throttle]
;SET I, 6
;HWI [thrusters_hwid]
; 7
;SET B, 0
;IFE [key_a_down], 1
;SET B, [throttle]
;IFE [key_e_down], 1
;SET B, [throttle]
;SET I, 7
;HWI [thrusters_hwid]

; harpoon0
;IFE [key_1_down], 1
;	JSR fireHarpoon0
;SET [key_1_down], 0
; harpoon1
;IFE [key_2_down], 1
;	JSR fireHarpoon1
;SET [key_2_down], 0

;IFE [key_t_down], 1
;	JSR throttle_up
;IFE [key_g_down], 1
;	JSR throttle_down

;IFE [key_enter_down], 1
;	JSR pressed_enter

;IFE [key_f_down], 1
;	JSR fire_laser



;IFE [mode], 0
;	IFE [key_x_down], 1
;		SUB [scanner_zoom], 1
;IFE [mode], 0
;	IFE [key_z_down], 1
;		ADD [scanner_zoom], 1

;IFE [mode], 2
;	JSR ops_control

;IFG [mode], 2
;	JSR radio_control


;IFE [key_left_down], 1
;	IFE [mode], 0
;		JSR scan_exit_radio
;IFE [key_right_down], 1
;	IFE [mode], 0
;		JSR scan_exit_helm
;IFE [key_left_down], 1
;	IFE [mode], 0
;		JSR radio3_mode_func

;IFE [key_left_down], 1
;	IFE [mode], 1
;		JSR dev_mode_func

;IFE [key_right_down], 1
;	IFE [mode], 1
;		JSR ops_mode_func


;IFE [key_right_down], 1
;	IFE [mode], 0
;		JSR helm_mode_func



;SET PC, wait_for_key_loop





; Interrupt handler
; ==============================
:irq_handler
IAQ 1
IFE A, [keyboard_hwid]
	JSR input_handler
IFE A, [radio1_hwid]
	JSR check_radio1
IFE A, [radio2_hwid]
	JSR check_radio2
IFE A, [clock_hwid]
	JSR clock_IRQ_handler

RFI 0

:clock_IRQ_handler
ADD [clocklo], 1
IFE [clocklo], 0xFFFF
	ADD [clockhi], 1
IFE [clocklo], 0xFFFF
	SET [clocklo], 0
SET PC, POP



; Functions
; ==============================
:intro_screen
SET PUSH, Z
SET PUSH, A
JSR clear_screen
SET [screen_cursor], 0x0020
SET Z, 0xB000
SET A, str_intro1
JSR write_string
SET [screen_cursor], 0x0080
SET Z, 0xF800
SET A, str_intro2
JSR write_string
SET A, str_intro3
JSR write_string
SET A, str_intro4
JSR write_string
SET A, str_intro5
JSR write_string
SET [screen_cursor], 0x0160
SET Z, [fg_light_grey]
SET A, str_intro6
JSR write_string
SET [key_left_down], 0
SET [key_right_down], 0
SET A, POP
SET Z, POP
SET PC, POP

:scanner_mode_func
SET [mode], 0
JSR map_font
SET [video_ram], 0x8400
SET A, 0
SET B, [video_ram]
HWI [screen_hwid]
SET A, 2
SET B, scan_pallete
HWI [screen_hwid]
JSR canvas_setup
JSR scanner_draw
SET PC, POP

:scan_exit_helm
SET A, 1
SET B, font
HWI [screen_hwid]
SET A, 2
SET B, 0
HWI [screen_hwid]
SET [video_ram], 0x8000
SET A, 0
SET B, [video_ram]
HWI [screen_hwid]

JSR helm_mode_func
SET PC, POP

:scan_exit_radio
SET A, 1
SET B, font
HWI [screen_hwid]
SET A, 2
SET B, 0
HWI [screen_hwid]
SET [video_ram], 0x8000
SET A, 0
SET B, [video_ram]
HWI [screen_hwid]
JSR radio3_mode_func
SET PC, POP

:dev_mode_func
SET PUSH, Z
SET PUSH, Y
SET PUSH, X
SET PUSH, J
SET PUSH, I
SET PUSH, C
SET PUSH, B
SET PUSH, A
SET [mode], F
JSR clear_screen
JSR display_dev
SET [key_left_down], 0
SET [key_right_down], 0
SET A, POP
SET B, POP
SET C, POP
SET I, POP
SET J, POP
SET X, POP
SET Y, POP
SET Z, POP
SET PC, POP

:helm_mode_func
SET PUSH, Z
SET PUSH, A
SET [mode], 1
JSR clear_screen
SET Z, 0xB000
SET A, str_title
JSR write_string
SET [screen_cursor], 0x0017
SET Z, [fg_light_grey]
SET A, str_throttle
JSR write_string
SET [screen_cursor], 0x000C
SET Z, [fg_light_grey]
IFE [hcursor], 0
	SET Z, [bg_light_grey]
SET A, str_sensors
JSR write_string
SET [0x800B], 0xF03C
SET [0x8013], 0xF03E
SET [screen_cursor], 0x0020
SET Z, 0xF800
SET A, str_heading
JSR write_string
SET [key_left_down], 0
SET [key_right_down], 0
SET A, POP
SET Z, POP
SET PC, POP

:radio1_mode_func
SET PUSH, Z
SET PUSH, A
SET [rcursor1], 0
SET [mode], 3
JSR clear_screen
SET Z, 0xB000
SET A, str_title
JSR write_string
SET [screen_cursor], 0x000E
SET Z, [fg_light_grey]
IFE [rcursor1], 0
	SET Z, [bg_light_grey]
SET A, str_radio1
JSR write_string
SET Z, [fg_light_grey]
SET [0x800D], 0xF03C
SET [0x8014], 0xF03E
SET [screen_cursor], 0x0020
SET A, str_channel
JSR write_string
SET [screen_cursor], 0x0040
SET A, str_signal
JSR write_string
SET [screen_cursor], 0x004F
SET A, str_angle
JSR write_string
SET [screen_cursor], 0x0060
SET A, str_message
JSR write_string
SET [key_left_down], 0
SET [key_right_down], 0
SET A, POP
SET Z, POP
SET PC, POP

:radio2_mode_func
SET PUSH, Z
SET PUSH, A
SET [rcursor2], 0
SET [mode], 4
JSR clear_screen
SET Z, 0xB000
SET A, str_title
JSR write_string
SET [screen_cursor], 0x000E
SET Z, [bg_light_grey]
SET A, str_radio2
JSR write_string
SET Z, [fg_light_grey]
SET [0x800D], 0xF03C
SET [0x8014], 0xF03E
SET [screen_cursor], 0x0020
SET A, str_channel
JSR write_string
SET [screen_cursor], 0x0040
SET A, str_signal
JSR write_string
SET [screen_cursor], 0x004F
SET A, str_angle
JSR write_string
SET [screen_cursor], 0x0060
SET A, str_message
JSR write_string
SET [key_left_down], 0
SET [key_right_down], 0
SET A, POP
SET Z, POP
SET PC, POP

:radio3_mode_func
SET PUSH, Z
SET PUSH, A
;SET [rcursor3], 0
SET [mode], 5
JSR clear_screen
SET Z, 0xB000
SET A, str_title
JSR write_string
SET [screen_cursor], 0x000D
SET Z, [fg_light_grey]
IFE [rcursor3], 0
	SET Z, [bg_light_grey]
SET A, str_radio3
JSR write_string
SET Z, [fg_light_grey]
SET [0x800C], 0xF03C
SET [0x8015], 0xF03E
SET [screen_cursor], 0x0020
SET A, str_channel
JSR write_string
SET [screen_cursor], 0x0040
JSR write_string
SET [0x8029], 0x7031
SET [0x8049], 0x7032
SET [screen_cursor], 0x0060
SET A, str_message
JSR write_string
SET [key_left_down], 0
SET [key_right_down], 0
SET A, POP
SET Z, POP
SET PC, POP

:ops_mode_func
SET PUSH, Z
SET PUSH, A
SET [mode], 2
JSR clear_screen
SET Z, 0xB000
SET A, str_title
JSR write_string
SET [screen_cursor], 0x0040
SET Z, [fg_light_grey]
SET A, str_leftclamp
JSR write_string
SET [screen_cursor], 0x0060
SET A, str_rightclamp
JSR write_string
SET [screen_cursor], 0x000F
SET Z, [fg_light_grey]
IFE [ocursor], 0
	SET Z, [bg_light_grey]
SET A, str_ops
JSR write_string
SET [0x800E], 0xF03C
SET [0x8012], 0xF03E
SET Z, [fg_light_grey]
SET [screen_cursor], 0x00A0
SET A, str_cockpitdoor
JSR write_string
SET [screen_cursor], 0x00C0
SET A, str_leftdoor
JSR write_string
SET [screen_cursor], 0x00E0
SET A, str_rightdoor
JSR write_string
SET [screen_cursor], 0x0100
SET A, str_reardoor
JSR write_string

SET [screen_cursor], 0x0140
SET A, str_fuel
JSR write_string
SET [key_left_down], 0
SET [key_right_down], 0
SET A, POP
SET Z, POP
SET PC, POP

:pressed_enter
IFE [mode], 3
	IFE [rcursor1], 1
		JSR change1B
IFE [mode], 4
	IFE [rcursor2], 1
		JSR change2B
IFE [mode], 3
	IFE [rcursor1], 2
		JSR change1C
IFE [mode], 4
	IFE [rcursor2], 2
		JSR change2C
IFE [mode], 3
	IFE [rcursor3], 1
		JSR change1B
IFE [mode], 5
	IFE [rcursor3], 5
		JSR change2B
IFE [mode], 5
	IFE [rcursor3], 2
		JSR change1C
IFE [mode], 5
	IFE [rcursor3], 6

		JSR change2C
IFE [mode], 5
	IFE [rcursor3], 3
		JSR radio1_send
IFE [mode], 5
	IFE [rcursor3], 7
		JSR radio2_send
IFE [mode], 5
	IFE [rcursor3], 4
		IFE [radio_repeating1], 0
			SET PC, radio1_repeatswitch_on
IFE [mode], 5
	IFE [rcursor3], 8
		IFE [radio_repeating2], 0
			SET PC, radio2_repeatswitch_on
IFE [mode], 5
	IFE [rcursor3], 4
		IFE [radio_repeating1], 1
			SET PC, radio1_repeatswitch_off
IFE [mode], 5
	IFE [rcursor3], 8
		IFE [radio_repeating2], 1
			SET PC, radio2_repeatswitch_off
IFE [mode], 5
	IFE [rcursor3], 9
		SET PC, change_message
SET [key_enter_down], 0
SET PC, POP
:radio1_repeatswitch_on
SET [radio_repeating1], 1
SET [key_enter_down], 0
SET PC, POP

:radio2_repeatswitch_on
SET [radio_repeating2], 1
SET [key_enter_down], 0
SET PC, POP

:radio1_repeatswitch_off
SET [radio_repeating1], 0
SET [key_enter_down], 0
SET PC, POP

:radio2_repeatswitch_off
SET [radio_repeating2], 0
SET [key_enter_down], 0
SET PC, POP


:ops_control

IFE [key_up_down], 1
		IFE [ocursor], 0
			SET [ocursor], 6
IFE [key_up_down], 1
		IFG [ocursor], 0
			SUB [ocursor], 1

IFE [key_down_down], 1
		ADD [ocursor], 1

IFE [key_left_down], 1
		JSR ops_left

IFE [key_right_down], 1
		JSR ops_right

IFE [ocursor], 7
	SET [ocursor], 0
SET PC, POP

:radio_control

IFE [key_up_down], 1
	IFE [mode], 2
		IFE [rcursor1], 0
			SET [rcursor1], 1

IFE [key_up_down], 1
	IFE [mode], 3
		IFE [rcursor2], 0
			SET [rcursor2], 7
IFE [key_down_down], 1
	IFE [mode], 2
		IFE [rcursor1], 0
			SET [rcursor1], 1


IFE [key_up_down], 1
	IFE [mode], 2
		IFG [rcursor1], 0
			SET [rcursor1], 0
IFE [key_up_down], 1
	IFE [mode], 3
		IFG [rcursor2], 0
			SUB [rcursor2], 1


;IFE [key_down_down], 1
;	IFE [mode], 3
;		IFG [rcursor1], 0
;			SET [rcursor1], 0
IFE [key_down_down], 1
	IFE [mode], 3
		ADD [rcursor2], 1
		
IFE [key_down_down], 1
	IFE [mode], 3
		IFG [rcursor2], 6
			SET [rcursor2], 0

IFE [key_left_down], 1
	IFG [mode], 2
		JSR radio_left

IFE [key_right_down], 1
	IFG [mode], 2
		JSR radio_right

IFE [key_up_down], 1
	IFE [mode], 5
		IFE [rcursor3], 0
			SET [rcursor3], 9
IFE [key_down_down], 1
	IFE [mode], 5
		IFE [rcursor3], 9
			SET [rcursor3], 0
IFE [key_up_down], 1
	IFE [mode], 5
		IFL [rcursor3], 5
			IFG [rcursor3], 0
			 SET [rcursor3], 0

IFE [key_down_down], 1
	IFE [mode], 5
	 IFG [rcursor3], 4
		SET [rcursor3], 9

IFE [key_down_down], 1
	IFE [mode], 5
		IFE [rcursor3], 1
			SET [rcursor3], 5
IFE [key_down_down], 1
	IFE [mode], 5
		IFE [rcursor3], 2
			SET [rcursor3], 6
IFE [key_down_down], 1
	IFE [mode], 5
		IFE [rcursor3], 3
			SET [rcursor3], 7
IFE [key_down_down], 1
	IFE [mode], 5
		IFE [rcursor3], 4
			SET [rcursor3], 8
IFE [key_up_down], 1
	IFE [mode], 5
		IFE [rcursor3], 5
			SET [rcursor3], 1
IFE [key_up_down], 1
	IFE [mode], 5
		IFE [rcursor3], 6
			SET [rcursor3], 2
IFE [key_up_down], 1
	IFE [mode], 5
		IFE [rcursor3], 7
			SET [rcursor3], 3
IFE [key_up_down], 1
	IFE [mode], 5
		IFE [rcursor3], 9
			SET [rcursor3], 5
IFE [key_up_down], 1
	IFE [mode], 5
		IFE [rcursor3], 8
			SET [rcursor3], 4
IFE [key_down_down], 1
	IFE [mode], 5
		IFE [rcursor3], 0
			SET [rcursor3], 1



SET PC, POP

; Control should never end up here
DAT 0x0000
DAT 0x0000
DAT 0x0000
DAT 0x0000
DAT 0x0000


.include 'MGhelm\src\drivers.dasm'    ; Hardware support
.include 'MGhelm\src\input.dasm'	  ; Keyboard handling.
.include 'MGhelm\src\thrusters.dasm'  ; Thrusters and Lasers
.include 'MGhelm\src\stdio.dasm'      ; Functions for writing to screen
.include 'MGhelm\src\sensors.dasm'    ; support functions for Sensor display
.include 'MGhelm\src\ops.dasm'        ; functions for ops screen
.include 'MGhelm\src\radio.dasm'      ; functions for radio controls
.include 'MGhelm\src\nav.dasm'        ; possible upcoming nav screen
.include 'MGhelm\src\strings.dasm'    ; strings
.include 'MGhelm\src\math.dasm'       ; math
.include 'MGhelm\src\gscanner.dasm'   ; Graphical Scanner
.include 'MGhelm\src\drawing.dasm'    ; Drawing functions